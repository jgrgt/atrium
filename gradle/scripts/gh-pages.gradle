apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'org.jetbrains.dokka'

def ghPagesPathWithoutVersion = "../${project.name}-gh-pages"
def ghPagesPath = "$ghPagesPathWithoutVersion/$ghPages_version"

task copyIndex(type: Copy) {
    from "$ghPagesPathWithoutVersion/index.version.md"
    into ghPagesPath
    rename('index.version.md', 'index.md')
    expand(version: ghPages_version)
    filteringCharset = 'UTF-8'
}

task copyCSS(type: Copy) {
    from "$ghPagesPathWithoutVersion/style.css"
    into  ghPagesPath
}

task removeGhPages {
    doFirst {
        delete ghPagesPath
    }
}

task ghPages {
//    dependsOn removeGhPages
    dependsOn dokkaHtml
    dokkaHtml.mustRunAfter removeGhPages
    finalizedBy copyCSS
    finalizedBy copyIndex
}

tasks.named("dokkaHtml") {
    def projects = docProjects.asList().sort{ it.name }.subList(0, 27)
    doFirst {
        println "going to generate kdoc including the projects: ${projects*.name}"
        println "====================="
    }

//    rootProject.configure(docProjects) { subProject ->
//        subProject.afterEvaluate {
//            classpath += kotlin.target.compilations.getByName("main").compileDependencyFiles.files.collect { file -> file }
//        }
//    }


    outputDirectory.set(project.file("$ghPagesPathWithoutVersion/$ghPages_version"))
    moduleName.set("doc")
    dokkaSourceSets {
        projects.forEach { p ->
            def sourceSetName = p.name + '-main'
            register(sourceSetName) {
                displayName.set(sourceSetName)
                includes.from(project.file("misc/kdoc/packages.md"))
//                samples.from(findSamples([p]))
                jdkVersion.set(8)
//                perPackageOption {
//                    reportUndocumented.set(true)
//                }

//                sourceLink {
//                    // Unix based directory relative path to the root of the project (where you execute gradle respectively).
//                    localDirectory.set(file("./"))
//
//                    // URL showing where the source code can be accessed through the web browser
//                    remoteUrl.set("$github_url/$dokka_sourceMapping/".toURL())
//
//                    // Suffix which is used to append the line number to the URL. Use #L for GitHub
//                    remoteLineSuffix.set("#L")
//                }

                // Was: sourceDirs
                sourceRoots.from( file("${p.projectDir}/$srcKotlin"))

//                [
//                    "ch.tutteli.atrium.creating.impl",
//                    "ch.tutteli.atrium.api.verbs.internal",
//                    "ch.tutteli.atrium.logic.creating.basic.contains.steps.impl",
//                    "ch.tutteli.atrium.logic.creating.charsequence.contains.steps.impl",
//                    //TODO remove the below with 1.0.0
//                    "ch.tutteli.atrium.api.cc.de_CH.creating.charsequence.contains.builders.impl",
//                    "ch.tutteli.atrium.api.cc.de_CH.creating.iterable.contains.builders.impl",
//                    "ch.tutteli.atrium.assertions.builders.impl",
//                    "ch.tutteli.atrium.domain.builders.reporting.impl",
//                    "ch.tutteli.atrium.domain.builders.creating.changers.impl",
//
//                ].each { pkg ->
//                    perPackageOption {
//                        prefix.set(pkg)
//                        suppress.set(true)
//                    }
//                }
            }
        }
    }
}
//
//tasks.dokkaHtmlMultiModule.configure {
//    outputDirectory.set(buildDir.resolve("dokkaCustomMultiModuleOutput"))
//    documentationFileName.set("README.md")
//}
